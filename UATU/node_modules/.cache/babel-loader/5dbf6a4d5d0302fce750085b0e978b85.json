{"ast":null,"code":"module.exports = {\n  /* Creates the appended URI, in order to be able to run the Fetch call correctly, \r\n  and return the results of the character and comics/series. The API Fetch call MUST contain the Public Key, \r\n  as generated by creating a Developer account */\n  publicKey: function publicKey() {\n    return '5ef86689af1d8abd822d2eeb00844eda';\n  },\n  appendParam: function appendParam(uriString, paramName, paramValue) {\n    if (uriString.includes('?')) {\n      return uriString + '&' + paramName + '=' + encodeURI(paramValue);\n    } else {\n      return uriString + '?' + paramName + '=' + encodeURI(paramValue);\n    }\n  },\n  urlWithPublicKey: function urlWithPublicKey(uriString) {\n    return this.appendParam(uriString, 'apikey', this.publicKey());\n  }\n};","map":{"version":3,"sources":["C:\\Users\\Cory\\Desktop\\Code Louisville\\Code-Louisville-REACT-2018\\UATU\\src\\utility.js"],"names":["module","exports","publicKey","appendParam","uriString","paramName","paramValue","includes","encodeURI","urlWithPublicKey"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB;AAEb;;;AAIAC,EAAAA,SAAS,EAAE,qBAAY;AACnB,WAAO,kCAAP;AACH,GARY;AAUbC,EAAAA,WAAW,EAAE,qBAAUC,SAAV,EAAqBC,SAArB,EAAgCC,UAAhC,EAA4C;AACrD,QAAIF,SAAS,CAACG,QAAV,CAAmB,GAAnB,CAAJ,EAA6B;AACzB,aAAOH,SAAS,GAAG,GAAZ,GAAkBC,SAAlB,GAA8B,GAA9B,GAAoCG,SAAS,CAACF,UAAD,CAApD;AACH,KAFD,MAEO;AACH,aAAOF,SAAS,GAAG,GAAZ,GAAkBC,SAAlB,GAA8B,GAA9B,GAAoCG,SAAS,CAACF,UAAD,CAApD;AACH;AACJ,GAhBY;AAkBbG,EAAAA,gBAAgB,EAAE,0BAAUL,SAAV,EAAqB;AACnC,WAAO,KAAKD,WAAL,CAAiBC,SAAjB,EAA4B,QAA5B,EAAsC,KAAKF,SAAL,EAAtC,CAAP;AACH;AApBY,CAAjB","sourcesContent":["module.exports = {\r\n\r\n    /* Creates the appended URI, in order to be able to run the Fetch call correctly, \r\n    and return the results of the character and comics/series. The API Fetch call MUST contain the Public Key, \r\n    as generated by creating a Developer account */\r\n\r\n    publicKey: function () {\r\n        return '5ef86689af1d8abd822d2eeb00844eda';\r\n    },\r\n\r\n    appendParam: function (uriString, paramName, paramValue) {\r\n        if (uriString.includes('?')) {\r\n            return uriString + '&' + paramName + '=' + encodeURI(paramValue);\r\n        } else {\r\n            return uriString + '?' + paramName + '=' + encodeURI(paramValue);\r\n        }\r\n    },\r\n\r\n    urlWithPublicKey: function (uriString) {\r\n        return this.appendParam(uriString, 'apikey', this.publicKey());\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}